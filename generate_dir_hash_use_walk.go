package main

import (
	"crypto/sha1"
	"encoding/hex"
	"flag"
	"fmt"
	"github.com/ivpusic/grpool"
	"io"
	"os"
	"path"
	"path/filepath"
	"strconv"
	"strings"
	"sync"
	"time"
)

var ignoreSet []string

func main() {
	dir := flag.String("p", ".", "Directory to parse")
	objFile := flag.String("o", "", "Destination file generated by command, named by args from -o joint system time")
	flag.String("i", "", "Files or Path to be ignored")
	flag.Parse()

	initIgnoreSet()

	listFile(*dir, *objFile)
}

func initIgnoreSet() {
	var start int

	for i := 0; i < len(os.Args); i++ {
		if os.Args[i] != "-i" {
			continue
		} else {
			start = i + 1
			break
		}
	}

	for i := start; i < len(os.Args); {
		if os.Args[i] == "-i" {
			continue
		} else if strings.Contains(os.Args[i], "-") {
			break
		} else {
			ignoreSet = append(ignoreSet, os.Args[i])
			i++
		}
	}
}

func isIgnoreFile(str string) bool {
	for i := 0; i < len(ignoreSet); i++ {
		if strings.Contains(str, ignoreSet[i]) {
			return true
		}
	}
	return false
}

func listFile(folder string, obj string) {
	os.MkdirAll(path.Dir(obj), os.ModePerm)
	desFile := obj + time.Now().Format("20060102-150405")
	//Open destination file to write result, create it if not exist.
	fi, err1 := os.OpenFile(desFile, os.O_CREATE|os.O_APPEND|os.O_RDWR, os.ModePerm|os.ModeTemporary)
	defer fi.Close()
	if err1 != nil {
		panic(err1)
	}
	var wg sync.WaitGroup
	err := filepath.Walk(folder, func(folder string, f os.FileInfo, err error) error {
		if isIgnoreFile(folder) {
			return nil
		}
		if f == nil {
			return err
		}
		if !f.Mode().IsRegular() {
			// filter out non-regular files (e.g., directories, symlinks, named pipe, socket, devices, etc.)
			return nil
		}
		//s
		pool := grpool.NewPool(2, 2)
		defer pool.Release()
		pool.WaitCount(10)
		for i := 0; i < 10; i++ {
			//		count := i
			pool.JobQueue <- func() {
				// say that job is done, so we can know how many jobs are finished
				defer pool.JobDone()
				size := f.Size()
				sha_str, err := sha1File(folder)

				if err != nil {
					panic(err)
				}
				str := folder + "," + sha_str + "," + strconv.FormatInt(size, 10) + "\n"
				fi.WriteString(str)
				//e
			}
		}
		pool.WaitAll()
		return nil
	})
	wg.Wait()
	if err != nil {
		fmt.Printf("filepath.Walk() returned %v\n", err)
	}
}

func sha1File(path string) (string, error) {
	file, err := os.Open(path)
	defer file.Close()
	if err != nil {
		return "", err
	}

	h := sha1.New()
	_, err = io.Copy(h, file)
	//h.Write([]byte(path))
	if err != nil {
		return "", err
	}
	//	println(hex.EncodeToString(h.Sum(nil)))
	return hex.EncodeToString(h.Sum(nil)), nil
}

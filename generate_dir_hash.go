package main

import (
	"crypto/sha1"
	"encoding/hex"
	"flag"
	"io"
	"io/ioutil"
	"os"
	"strconv"
	"path"
	"strings"
	"time"
)

var  ignoreFiles string

func main() {
	dir := flag.String("p", "./", "Directory to parse")
	objFile := flag.String("o", ".tmp", "Destination file generated by command")
	ignoreKey := flag.String("i", "", "Files or Path to be ignore")
	flag.Parse()

	ignoreFiles = string(*ignoreKey)
	listFile(*dir, *objFile)
}

/*TODO: 1 Eliminates recursion; 
		2 I had attemp to use Walk() from package filepath, but i felt it uses recursion also, I'm not sure if it's so.
*/
//traverse files in specified directory
func listFile(folder string, obj string) {
	os.MkdirAll(path.Dir(obj), os.ModePerm)
	desFile := obj + time.Now().Format("20060102-150405")
	f, err := os.OpenFile(desFile, os.O_CREATE|os.O_APPEND|os.O_RDWR, os.ModePerm|os.ModeTemporary)
	defer f.Close()
	if err != nil {
	    panic(err)
	}
	files, _ := ioutil.ReadDir(folder)
	for _, file := range files {
		if strings.Contains(file.Name(), ignoreFiles){
			continue
		}
		if file.IsDir() {
			listFile(folder + "/" + file.Name(), obj)
		} else {
			path := folder + "/" + file.Name()
			size := file.Size()
			sha_str, err := sha1File(path)

			if err != nil {
				panic(err)
			}
			str := path + "," + sha_str + "," + strconv.FormatInt(size, 10) + "\n"
			f.WriteString(str)
		}
	}
}

func sha1File(path string) (string, error) {
	file, err := os.Open(path)
	defer file.Close()
	if err != nil {
		return "", err
	}

	h := sha1.New()
	_, err = io.Copy(h, file)
	//h.Write([]byte(path))
	if err != nil {
		return "", err
	}
	return hex.EncodeToString(h.Sum(nil)), nil
}
